n_points=50
probability <- 10^(seq(-4,0, length.out = n_points))
for (prob in probability) {
net <- watts.strogatz.game(dim=1,size=300,nei=6, p=prob)
avg_pth_lgth <- c(avg_pth_lgth, mean_distance(net))
clst_coeff <- c(clst_coeff, transitivity(net))
}
Regular<-watts.strogatz.game(dim=1,size=300,nei=6, p=0)
avg_pth_lgth_0 <- avg_pth_lgth/mean_distance(Regular)
clst_coeff_0 <- clst_coeff/transitivity(Regular)
net_data <- data.frame(probability, avg_pth_lgth_0, clst_coeff_0)
net_data_avg_pth <- net_data[,c('probability', 'avg_pth_lgth_0')]
names(net_data_avg_pth)[2] <- 'value'
net_data_clst_coeff <- net_data[,c('probability', 'clst_coeff_0')]
net_data_clst_coeff['Metric'] <- 'C(p)/C(0)'
final_avg_path<-(final_avg_path+net_data_avg_pth$value)/2
final_clst_coef<-(final_clst_coef+net_data_clst_coeff$value)/2
}
final_network_data <- rbind(final_avg_path, final_clst_coef)
plt <- ggplot(data = final_network_data, aes(x=probability, y=value, col=Metric)) +
geom_line() +
scale_x_log10() + labs(y=NULL)
net_data_avg_pth+net_data_avg_coeff
net_data_avg_pth+net_data_clst_coeff
net_data_clst_coeff
Regular<-watts.strogatz.game(dim=1,size=300,nei=6, p=0)
avg_pth_lgth_0 <- avg_pth_lgth/mean_distance(Regular)
clst_coeff_0 <- clst_coeff/transitivity(Regular)
net_data <- data.frame(probability, avg_pth_lgth_0, clst_coeff_0)
net_data_avg_pth <- net_data[,c('probability', 'avg_pth_lgth_0')]
names(net_data_avg_pth)[2] <- 'value'
net_data_clst_coeff <- net_data[,c('probability', 'clst_coeff_0')]
names(net_data_clst_coeff)[2] <- 'value'
net_data_clst_coeff
net_data_avg_pth
net_data_clst_coeff+net_data_avg_pth
final_avg_path<-{}
final_clst_coef<-{}
for (i in c(1:100)){
avg_pth_lgth <- c()
clst_coeff <- c()
n_points=50
probability <- 10^(seq(-4,0, length.out = n_points))
for (prob in probability) {
net <- watts.strogatz.game(dim=1,size=300,nei=6, p=prob)
avg_pth_lgth <- c(avg_pth_lgth, mean_distance(net))
clst_coeff <- c(clst_coeff, transitivity(net))
}
Regular<-watts.strogatz.game(dim=1,size=300,nei=6, p=0)
avg_pth_lgth_0 <- avg_pth_lgth/mean_distance(Regular)
clst_coeff_0 <- clst_coeff/transitivity(Regular)
net_data <- data.frame(probability, avg_pth_lgth_0, clst_coeff_0)
net_data_avg_pth <- net_data[,c('probability', 'avg_pth_lgth_0')]
names(net_data_avg_pth)[2] <- 'value'
net_data_clst_coeff <- net_data[,c('probability', 'clst_coeff_0')]
names(net_data_clst_coeff)[2] <- 'value'
final_avg_path<-(final_avg_path+net_data_avg_pth)/2
final_clst_coef<-(final_clst_coef+net_data_clst_coeff)/2
}
final_avg_path
Regular<-watts.strogatz.game(dim=1,size=300,nei=6, p=0)
avg_pth_lgth_0 <- avg_pth_lgth/mean_distance(Regular)
clst_coeff_0 <- clst_coeff/transitivity(Regular)
net_data <- data.frame(probability, avg_pth_lgth_0, clst_coeff_0)
net_data_avg_pth <- net_data[,c('probability', 'avg_pth_lgth_0')]
names(net_data_avg_pth)[2] <- 'value'
typeof(net_data_avg_pth)
net_data_avg_pth
list(50,2)
list(rep(0, 50),rep(0, 2))
list(rep(0, 50),rep(0, 50))
final_avg_path<-list(rep(0, 50),rep(0, 50))
final_clst_coef<-list(rep(0, 50),rep(0, 50))
for (i in c(1:100)){
avg_pth_lgth <- c()
clst_coeff <- c()
n_points=50
probability <- 10^(seq(-4,0, length.out = n_points))
for (prob in probability) {
net <- watts.strogatz.game(dim=1,size=300,nei=6, p=prob)
avg_pth_lgth <- c(avg_pth_lgth, mean_distance(net))
clst_coeff <- c(clst_coeff, transitivity(net))
}
Regular<-watts.strogatz.game(dim=1,size=300,nei=6, p=0)
avg_pth_lgth_0 <- avg_pth_lgth/mean_distance(Regular)
clst_coeff_0 <- clst_coeff/transitivity(Regular)
net_data <- data.frame(probability, avg_pth_lgth_0, clst_coeff_0)
net_data_avg_pth <- net_data[,c('probability', 'avg_pth_lgth_0')]
names(net_data_avg_pth)[2] <- 'value'
net_data_clst_coeff <- net_data[,c('probability', 'clst_coeff_0')]
names(net_data_clst_coeff)[2] <- 'value'
final_avg_path<-(final_avg_path+net_data_avg_pth)/2
final_clst_coef<-(final_clst_coef+net_data_clst_coeff)/2
}
final_network_data <- rbind(final_avg_path, final_clst_coef)
plt <- ggplot(data = final_network_data, aes(x=probability, y=value, col=Metric)) +
geom_line() +
scale_x_log10() + labs(y=NULL)
plt
plt <- ggplot(data = final_network_data, aes(x=probability,
y=value)) +
geom_line() +
scale_x_log10() + labs(y=NULL)
plt <- ggplot(data = final_network_data, aes(x=probability,
y=value)) +
geom_line() +
scale_x_log10() + labs(y=NULL)
plt
final_avg_path<-list(rep(0, 50),rep(0, 50))
final_clst_coef<-list(rep(0, 50),rep(0, 50))
for (i in c(1:100)){
avg_pth_lgth <- c()
clst_coeff <- c()
n_points=50
probability <- 10^(seq(-4,0, length.out = n_points))
for (prob in probability) {
net <- watts.strogatz.game(dim=1,size=300,nei=6, p=prob)
avg_pth_lgth <- c(avg_pth_lgth, mean_distance(net))
clst_coeff <- c(clst_coeff, transitivity(net))
}
Regular<-watts.strogatz.game(dim=1,size=300,nei=6, p=0)
avg_pth_lgth_0 <- avg_pth_lgth/mean_distance(Regular)
clst_coeff_0 <- clst_coeff/transitivity(Regular)
net_data <- data.frame(probability, avg_pth_lgth_0, clst_coeff_0)
net_data_avg_pth <- net_data[,c('probability', 'avg_pth_lgth_0')]
net_data_avg_pth['Metric'] <- 1
names(net_data_avg_pth)[2] <- 'value'
net_data_clst_coeff <- net_data[,c('probability', 'clst_coeff_0')]
net_data_clst_coeff['Metric'] <- 0
names(net_data_clst_coeff)[2] <- 'value'
final_avg_path<-(final_avg_path+net_data_avg_pth)/2
final_clst_coef<-(final_clst_coef+net_data_clst_coeff)/2
}
final_network_data
final_network_data['Metric'] <- 'L(p)/L(0)'
final_network_data
final_network_data[51:100,'Metric']<-'C(p)/C(0)'
final_network_data
plt <- ggplot(data = final_network_data, aes(x=probability,
y=value)) +
geom_line() +
scale_x_log10() + labs(y=NULL)
plt
plt <- ggplot(data = final_network_data, aes(x=probability,
y=value, col=Metric)) +
geom_line() +
scale_x_log10() + labs(y=NULL)
plt
library(visNetwork)
library(htmlwidgets)
library(igraph)
library(dplyr)
library(ggplot2)
class2022<-readRDS("classnetwork_2022.rds")
class2022_att<-readRDS("class2022_attributes.rds")
class2022_matrix<-as_edgelist(class2022, names = TRUE)
nodes <- data.frame(id = 1:140)
edges <- data.frame(from = class2022_matrix[,1],
to = class2022_matrix[,2])
saveWidget(visNetwork(nodes, edges) %>%
visIgraphLayout(layout = "layout_nicely",smooth =  TRUE) %>%
visNodes(shape="circle") %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T), file = "class2022.html")
#define the IC model
IC_modified<-function(max_steps,node_seeds,n_nodes,each_neighbors,prob){
infection_status <- rep.int(0, n_nodes)
day <- 0
daily_infected <- 0
day<-1
daily_infected[2] <- length(node_seeds)
infection_status[as.numeric(node_seeds)] <- 1
while((day<max_steps)&(tail(daily_infected, 1)<n_nodes)){
day <- day + 1
old_infected <- which(infection_status == 1)
for(node in old_infected){
new_infected <- each_neighbors[[node]][which(runif(length(each_neighbors[[node]]))<=prob[node])]
infection_status[as.numeric(new_infected)] <- 1
}
daily_infected[day+1] <- sum(infection_status == 1)
}
return(daily_infected)
}
# compute the list of neighbors for each node
adj_matrix <- igraph::as_adjacency_matrix(class2022, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
# compute the list of neighbors for each node
adj_matrix <- igraph::as_adjacency_matrix(class2022, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
stopifnot(require(data.table))
stopifnot(require(Matrix))
#search the neighbours of contangious node, and their neighbours have a chance of Pprob being infected
calculate_value2 <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(
length(each_neighbors[[node]]), 0, 1)<=Pprob)])
}
### function to model simple contagion, return can be modified if you want to see other outputs#
IC<-function(i,seeds,nNode,each_neighbors,Pprob){
node_seed=seeds[i]
node_value <- rep.int(0, nNode) ### node_value
infection <- rep.int(0, nNode)  ### infection status 0 uninfected 1 infected
new_infected <- list()  # to store the ID of nodes being activated each time step
day<-1
day_infected <- 1 ### infected num daily
new_infected[[day]]<-node_seed
node_value[as.numeric(node_seed)] <- 1 ### assign value for seed nodes
infection[as.numeric(node_seed)] <- 1
day<-2
old_infected<-which(infection == 1)
ContagiousID<-which(infection == 1) #nodes that are contagious
activeID<-unlist(lapply(ContagiousID,calculate_value2,each_neighbors,Pprob))
newactiveID<- setdiff(activeID, old_infected)
if (length(activeID)!=0)
{new_infected[[day]]<-newactiveID
infection[as.numeric(newactiveID)] <- 1
}else {new_infected[[day]]<-integer(0)}
day_infected[day] <- sum(infection == 1)
day<-3
old_infected<-which(infection == 1)
ContagiousID<-which(infection == 1) #nodes that are contagious
activeID<-unlist(lapply(ContagiousID,calculate_value2,each_neighbors,Pprob))
newactiveID<- setdiff(activeID, old_infected)
if (length(activeID)!=0)
{new_infected[[day]]<-newactiveID
infection[as.numeric(newactiveID)] <- 1
}else {new_infected[[day]]<-integer(0)}
day_infected[day] <- sum(infection == 1)
for (day in c(4:30)){
old_infected<-which(infection == 1)
Within3days<-list(new_infected[[day-3]],
new_infected[[day-2]],new_infected[[day-1]])
ContagiousID<-unlist(Within3days, use.names = FALSE)
activeID<-unlist(lapply(ContagiousID,calculate_value2,each_neighbors,Pprob))
newactiveID<- setdiff(activeID, old_infected)
if (length(activeID)!=0)
{new_infected[[day]]<-newactiveID
infection[as.numeric(newactiveID)] <- 1
}else {new_infected[[day]]<-integer(0)}
day_infected[day] <- sum(infection == 1)
day=day+1
}
return(day_infected)
}
##### function of IC, to be used multiply according to different seeds (i.e., who in the network get the virus first)
IC2 <- function(i,seeds,nNode,each_neighbors,Pprob) {
day_infected_matrix <- do.call('rbind', lapply(1:i, IC,seeds,nNode,
each_neighbors,Pprob))
return(day_infected_matrix)
}
#  For the orginial network :
# prepare the seed matrix:
#introduce a patient to an otherwise healthy population, this person should be randomly selected to mimic the contagion in real-world
#since we have only 140 nodes, we can selecte them one by one; therefore, we will have 140 different staring points to kick-off the congation procee
seeds<-c(1:140)
nNode=140  #size of the original network
Pprob=0.1  #the probability for an infected person to pass down the virus to his/her neighbours
adj_matrix <- igraph::as_adjacency_matrix(class2022, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
result3<- replicate(100, IC2(140,seeds,nNode,each_neighbors,Pprob), simplify=FALSE)  #run at least 100 times since each IC model run has its own randomness (see the "calculate_value2 function")
#define the IC model
IC_modified<-function(max_steps,node_seeds,n_nodes,each_neighbors,prob){
infection_status <- rep.int(0, n_nodes)
day <- 0
daily_infected <- 0
day<-1
daily_infected[2] <- length(node_seeds)
infection_status[as.numeric(node_seeds)] <- 1
while((day<max_steps)&(tail(daily_infected, 1)<n_nodes)){
day <- day + 1
old_infected <- which(infection_status == 1)
for(node in old_infected){
new_infected <- each_neighbors[[node]][which(runif(length(each_neighbors[[node]]))<=prob[node])]
infection_status[as.numeric(new_infected)] <- 1
}
daily_infected[day+1] <- sum(infection_status == 1)
}
return(daily_infected)
}
# compute the list of neighbors for each node
adj_matrix <- igraph::as_adjacency_matrix(class2022, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1])
# set the other parameters
max_steps <- 500L
n_nodes <- 140L
n_attempts <- 50L
prob <- class2022_att$pYoutube
# perform the IC model several times to decide best starting node
mean_steps <- vector(length = n_nodes)
for(seed in 1:n_nodes){
n_steps <- vector(length = n_attempts)
for(i in 1:n_attempts){
node_history <- IC_modified(max_steps, seed, n_nodes, each_neighbors, prob)
n_steps[i] <- length(node_history)
}
mean_steps[seed] <- mean(n_steps)
}
chosen_node <- which.min(mean_steps)
chosen_node
n_steps
mean_steps
node_history
threshold_model<-function(max_steps,node_seeds,n_nodes,each_neighbors,thresh){
infection_status <- rep.int(0, n_nodes)
day <- 0L
daily_infected <- 0
day<-1L
newly_infected <- node_seeds
infection_status[newly_infected] <- 1
daily_infected[2] <- sum(infection_status == 1)
while((day<max_steps)&(length(newly_infected) != 0)){
day <- day + 1
not_infected <- which(infection_status == 0)
newly_infected <- vector()
for(node in not_infected){
infected_neighbours <- mean(infection_status[each_neighbors[[node]]])
if(infected_neighbours > thresh[node]){
newly_infected <- append(newly_infected, node)
}
}
infection_status[newly_infected] <- 1
daily_infected[day+1] <- sum(infection_status == 1)
}
return(daily_infected)
}
# compute the list of neighbors for each node
adj_matrix <- igraph::as_adjacency_matrix(class2022, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1])
# set the other parameters
max_steps <- 100L
n_nodes <- 140L
n_attempts <- 20L
thresh <- class2022_att$tRecipe
# run the model to check for the best node
max_infected <- vector(length = n_nodes)
n_steps <- vector(length = n_nodes)
for(seed in 1:n_nodes){
node_history <- threshold_model(max_steps,seed,n_nodes,each_neighbors,thresh)
max_infected[seed] <- tail(node_history, n = 1L)
n_steps[seed] <- length(node_history)
}
summary <- data.frame("node" = 1:n_nodes, "max_infected" = max_infected,
"n_steps" = n_steps)
head(summary[with(summary, order(-max_infected, n_steps)),], 3)
#degree(class2022, v=138)
#betweenness(class2022, v=138)
threshold_model<-function(max_steps,node_seeds,n_nodes,each_neighbors,thresh){
infection_status <- rep.int(0, n_nodes)
day <- 0L
daily_infected <- 0
day<-1L
newly_infected <- node_seeds
infection_status[newly_infected] <- 1
daily_infected[2] <- sum(infection_status == 1)
while((day<max_steps)&(length(newly_infected) != 0)){
day <- day + 1
not_infected <- which(infection_status == 0)
newly_infected <- vector()
for(node in not_infected){
infected_neighbours <- mean(infection_status[each_neighbors[[node]]])
if(infected_neighbours > thresh[node]){
newly_infected <- append(newly_infected, node)
}
}
infection_status[newly_infected] <- 1
daily_infected[day+1] <- sum(infection_status == 1)
}
return(daily_infected)
}
# compute the list of neighbors for each node
adj_matrix <- igraph::as_adjacency_matrix(class2022, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1])
# set the other parameters
max_steps <- 100L
n_nodes <- 140L
n_attempts <- 20L
thresh <- class2022_att$tRecipe
# run the model to check for the best node
max_infected <- vector(length = n_nodes)
n_steps <- vector(length = n_nodes)
for(seed in 1:n_nodes){
node_history <- threshold_model(max_steps,seed,n_nodes,each_neighbors,thresh)
max_infected[seed] <- tail(node_history, n = 1L)
n_steps[seed] <- length(node_history)
}
summary <- data.frame("node" = 1:n_nodes, "max_infected" = max_infected,
"n_steps" = n_steps)
head(summary[with(summary, order(-max_infected, n_steps)),], 3)
#degree(class2022, v=138)
#betweenness(class2022, v=138)
degree(class2022, v=138)
betweenness(class2022, v=138)
transitivity(class2022,v=138)
transitivity(class2022)
transitivity(class2022,type='local')
if (!require("easypackages")) install.packages("easypackages") #easy package manager
if (!require("tidyverse")) install.packages("tidyverse") #main data science packages
if (!require("sf")) install.packages("sf") #main GIS package
if (!require("sp")) install.packages("sp") #needed for some GIS operation, will not be in use from 2023
if (!require("spdep")) install.packages("spdep") #neighborhood analysis in R
if (!require("spatialreg")) install.packages("spatialreg") #spatial modelling such as lag, error
if (!require("spgwr")) install.packages("spgwr") #GWR modelling
if (!require("RColorBrewer")) install.packages("RColorBrewer") # getting interesting color
if (!require("tmap")) install.packages("tmap") # Mapping package
if (!require("mapview")) install.packages("mapview") # Mapping package
if (!require("car")) install.packages("car") #some base regression functions
if (!require("cowplot")) install.packages("cowplot") #some base regression functions
if (!require("leafsync")) install.packages("leafsync") #using with mapview
if (!require("leaflet.extras2")) install.packages("leaflet.extras2") #using with mapview
easypackages::packages ("sf", "sp", "spdep", "spatialreg", "spgwr", "tmap", "mapview", "car", "RColorBrewer", "tidyverse",
"cowplot", "leafsync", "leaflet.extras2", "mapview", "caret", "xgboost", "randomForest", "lmvar")
easypackages::packages ("sf", "sp", "spdep", "spatialreg", "spgwr", "tmap", "mapview", "car", "RColorBrewer", "tidyverse",
"cowplot", "leafsync", "leaflet.extras2", "mapview", "caret", "xgboost", "randomForest", "lmvar")
Globalpath<- "C:/Users/milia/Spatial_statistics/spatial_group_project" #change the path to your folder
setwd(Globalpath)
getwd()
ref_data <- st_read("data/dataset_geo.gpkg")
mapview::mapview(ref_data, zcol = "incomming_ref")
set.seed(555)
model_data <- ref_data[,c('clean_elections','population','incomming_ref_target', 'conflict', 'human_losses_neighbors',
'gdp_capita','incomming_ref','avg_inc_ref_5y','outgoing_ref_other_weighted',
'difference_actual_5y','difference_actual_2y','difference_actual_1y',
'ratio_inc_ref_5y','outgoing_ref_neighbors','ADMIN','ISO_A3')]
model_data <- model_data[!sf::st_is_empty(model_data), ] %>% na.omit()
set.seed(555)
data_split <- rsample::initial_split(model_data, strata = "incomming_ref_target", prop = 0.75)
train.set_wtID <- rsample::training(data_split)
test.set_wtID  <- rsample::testing(data_split)
train <- train.set_wtID
test <- test.set_wtID
linearMod <- lm (incomming_ref_target ~  clean_elections + gdp_capita + conflict + human_losses_neighbors+
+ difference_actual_5y + difference_actual_2y + difference_actual_1y +
population + ratio_inc_ref_5y + # incomming_ref + avg_inc_ref_5y
+ outgoing_ref_neighbors + outgoing_ref_other_weighted, data= model_data)
summary(linearMod)
vif(linearMod)
#creating adjacency matrix
sf_use_s2(FALSE)
greendata_nbq <- poly2nb(model_data, queen=TRUE) #Queenâs Contiguity neighborhood
summary(greendata_nbq)
greendata_nbq_w <- nb2listw(greendata_nbq, style="W", zero.policy = TRUE) #Queenâs neighborhood wights
summary(greendata_nbq_w, zero.policy = TRUE)
mc_global <- moran.mc(linearMod$residuals, greendata_nbq_w, 139, alternative="greater", zero.policy = TRUE)
plot(mc_global)
mc_global
set.seed(555)
rf <-randomForest(incomming_ref_target ~  clean_elections + gdp_capita + conflict + human_losses_neighbors+
+ difference_actual_5y + difference_actual_2y + difference_actual_1y +
population + ratio_inc_ref_5y + # incomming_ref + avg_inc_ref_5y
+ outgoing_ref_neighbors + outgoing_ref_other_weighted, data= model_data, mtry = 7, ntree = 15000)
print(rf)
vip::vip(rf, num_features = 19, idth = 0.5, aesthetics = list(fill = "purple2"), include_type = T)
x<-vip::vip(rf, num_features = 19, idth = 0.5, aesthetics = list(fill = "purple2"), include_type = T)
View(x)
var<-x$data[1]
var
imp<-x$data[2]
imp
df
df<-data.frame("Variable"=var,"Importance"=imp)
df
ggplot(df)+geom_col(aes(x=Variable,y=Importance))
sort(df,decreasing=TRUE)
df
ggplot(df)+geom_col(aes(x=Variable,y=Importance))
df
ggplot(df)+geom_col(aes(x=Variable,y=Importance,size_sum))
ggplot(df)+geom_col(aes(x=Variable,y=Importance,size=size_sum))
ggplot(df)+geom_col(aes(x=Variable,y=Importance,size=10))
ggplot(df)+geom_col(aes(x=Variable,y=Importance,sort))
ggplot(df)+geom_col(aes(x=Variable,y=Importance,sort=TRUE))
ggplot(df)+geom_col(aes(x=Variable,y=Importance),sort=TRUE)
ggplot(df)+geom_col(aes(y=Variable,x=Importance),sort=TRUE)
? reorder
df
df<-sort(df,decreasing=TRUE)
ggplot(df)+geom_col(aes(y=Variable,x=reorder(Importance, )))
df<-sort(df$Importance,decreasing=TRUE)
df
df<-data.frame("Variable"=var,"Importance"=imp)
df
sort(df,decreasing=FALSE)
reorder(df)
df
desc(df)
df
desc(df$Importance)
asc(df$Importance)
ggplot(desc(df)+geom_col(aes(y=Variable,x=reorder(Importance, )))
ggplot(desc(df))+geom_col(aes(y=Variable,x=reorder(Importance, )))
ggplot(desc(df,by=df$Importance))+geom_col(aes(y=Variable,x=reorder(Importance, )))
ggplot(df)+geom_col(aes(y=Variable,x=reorder(Importance, )))
df
ggplot(df)+geom_col(aes(y=Variable,x=Importance))
ggplot(desc(df))+geom_col(aes(y=Variable,x=Importance))
ggplot(desc(df,by=df$Importance))+geom_col(aes(y=Variable,x=Importance))
ggplot(df)+geom_col(aes(y=Variable,x=Importance))
df$Importance <- factor(df$Importance) %>%
fct_reorder(df$importance)
df$Importance <- factor(df$Importance) %>%
fct_reorder(df$Importance)
df
ggplot(df)+geom_col(aes(y=Variable,x=Importance))
ggplot(df)+geom_col(aes(x=Variable,y=Importance))+coord_flip
ggplot(df)+geom_col(aes(x=Variable,y=Importance))+coord_flip()
df<-data.frame("Variable"=var,"Importance"=imp)
df
sort(df,decreasing=TRUE)
df
